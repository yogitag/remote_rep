# -*- coding: utf-8 -*-
"""Decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hvDgXCZfkC-glRVSSHzurSFcT8Wcu6mC
"""

import pandas as pd

df = pd.read_csv('Image_Segmention.csv')

df.info()
df.shape

"""Label encoding for the class variable"""

from sklearn.preprocessing import LabelEncoder

labelencoder = LabelEncoder()
df['Class']  = labelencoder.fit_transform(df['Class'])
df.info()

df['Class'].value_counts()

"""Do classification on the Decision Tree with imbalance data using the Gridsearchcv"""

X = df.iloc[:, 1:]
Y = df.iloc[:, 0]
Y.shape,X.shape

"""# Split the data"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, random_state=2021, stratify = Y)
X_train.shape, Y_train.shape

from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier

parameters = dict(min_samples_leaf = [5,10,15],
                  min_samples_split = [5,10, 15, 20, 25, 30] ,
                  max_depth = [3,4,5,6,7,8,9])

skf = StratifiedKFold(n_splits = 5, random_state = 2021, shuffle= True)
gscv = GridSearchCV(DecisionTreeClassifier(random_state = 2021), param_grid = parameters, cv= skf, scoring = 'neg_log_loss')
gscv.fit(X_train,Y_train)
gscv.best_score_

best_model = gscv.best_estimator_
Y_pred = best_model.predict(X_test)
Y_pred = best_model.predict_proba(X_test)
best_model

from sklearn.metrics import log_loss
Y_pred_proba = best_model.predict_proba(X_test)
log_loss(Y_test,Y_pred_proba)

df = pd.DataFrame(Y_pred_proba, columns=['class1_prob', 'class2_prob', 'class3_prob', 'class4_prob', 'class5_prob', 'class6_prob', 'class7_prob'])
df.head()

df.to_csv('class_probaility.csv')
